=encoding UTF-8

=head1 Name

sqitchtutorial-sqlite - A tutorial introduction to Sqitch change management on SQLite

=head1 Synopsis

  sqitch *

=head1 Description

This tutorial explains how to create a sqitch-enabled SQLite project, use a
VCS for deployment planning, and work with other developers to make sure
changes remain in sync and in the proper order.

We'll start by creating new project from scratch, a fictional antisocial
networking site called Flipr. All examples use L<Git|http://git-scm.com/> as
the VCS and L<SQLite|http://www.sqlite.org/>. as the storage engine.

=head1 Starting a New Project

Usually the first thing to do when starting a new project is to create a
source code repository. So let's do that with Git:

  > mkdir flipr
  > cd flipr 
  > git init .
  Initialized empty Git repository in /flipr/.git/
  > touch README.md
  > git add .
  > git commit -am 'Initialize project, add README.'

If you're a Git user and want to follow along the history, the repository used
in these examples is L<on GitHub|https://github.com/theory/sqitch-sqlite-intro>.

Now that we have a repository, let's get started with Sqitch. Every Sqitch
project must have a name associated with it, and, optionally, a unique URI. We
recommend including the URI, as it increases the uniqueness of object
identifiers internally, so let's specify one when we initialize Sqitch:

  > sqitch --engine sqlite init flipr --uri https://github.com/theory/sqitch-sqlite-intro/
  Created sqitch.conf
  Created sqitch.plan
  Created deploy/
  Created revert/
  Created verify/

Let's have a look at F<sqitch.conf>:

  [core]
  	engine = sqlite
  	# plan_file = sqitch.plan
  	# top_dir = .
  	# deploy_dir = deploy
  	# revert_dir = revert
  	# verify_dir = verify
  	# extension = sql
  # [core "sqlite"]
  	# db_name = 
  	# client = sqlite3
  	# sqitch_db = 

Good, it picked up on the fact that we're creating changes for the SQLite
engine, thanks to the C<--engine sqlite> option, and saved it to the file.
Furthermore, it wrote a commented-out C<[core "sqlite"]> section with all the
available SQLite engine-specific settings commented out and ready to be edited
as appropriate.

By default, Sqitch will read F<sqitch.conf> in the current directory for
settings. But it will also read F<~/.sqitch/sqitch.conf> for global settings.
Since SQLite's C<sqlite3> client is not in the path on my system, let's go
ahead an tell it globally where to find the client:

  > sqitch config --user core.sqlite.client /opt/local/bin/sqlite3

And let's also tell it who we are, since this data will be used in all
of our projects:

  > sqitch config --user user.name 'Marge N. O’Vera'
  > sqitch config --user user.email 'marge@example.com'

Have a look at F<~/.sqitch/sqitch.conf> and you'll see this:

  [core "sqlite"]
  	client = /opt/local/bin/sqlite3
  [user]
  	name = Marge N. O’Vera
  	email = marge@example.com

Which means that Sqitch should be able to find C<sqlite3> for any project, and
that it will always properly identify us when planning and committing changes.

Back to the repository. Have a look at the plan file, F<sqitch.plan>:

  %syntax-version=1.0.0-b2
  %project=flipr
  %uri=https://github.com/theory/sqitch-sqlite-intro/


Note that it has picked up on the name and URI of the app we're building.
Sqitch uses this data to manage cross-project dependencies. The
C<%syntax-version> pragma is always set by Sqitch, so that it always knows how
to parse the plan, even if the format changes in the future.

Let's commit these changes and start creating the database changes.

  > git add .
  > git commit -am 'Initialize Sqitch configuration.'
  [master f029823] Initialize Sqitch configuration.
   2 files changed, 16 insertions(+)
   create mode 100644 sqitch.conf
   create mode 100644 sqitch.plan

=head1 Our First Change

Let's create a table. Our app will need users, of course, so we'll create a
table for them. Run this command:

  > sqitch add users -n 'Creates table to track our users.'
  Created deploy/users.sql
  Created revert/users.sql
  Created verify/users.sql
  Added "users" to sqitch.plan

The L<C<add>|sqitch-add> command adds a database change to the plan and writes
deploy, revert, and verify scripts that represent the change. Now we edit
these files. The C<deploy> script's job is to create the table. By default,
the F<deploy/users.sql> file looks like this:

  -- Deploy users

  BEGIN;

  -- XXX Add DDLs here.

  COMMIT;

What we want to do is to replace the C<XXX> comment with the C<CREATE TABLE>
statement, like so:

  -- Deploy users

  BEGIN;

  CREATE TABLE users (
      nickname  TEXT      PRIMARY KEY,
      password  TEXT      NOT NULL,
      timestamp DATETIME  NOT NULL DEFAULT CURRENT_TIMESTAMP
  );

  COMMIT;

The C<revert> script's job is to precisely revert the change to the deploy
script, so we edit this to F<revert/users.sql> to look like this:

  -- Revert users

  BEGIN;

  DROP TABLE users;

  COMMIT;

Now we can try deploying this change:

  > sqitch --db-name flipr_test.db deploy
  Adding metadata tables to flipr_test-sqitch.db
  Deploying changes to flipr_test.db
    + users .. ok

First Sqitch created the metadata database and tables used to track database
changes. This database is separate from the database to which the C<users>
change was deployed; by default, it has the same name as the destination
database, but with C<-sqitch> appended to the base name. If you'd like it to
have a different name, use C<sqitch config core.sqlite.sqitch_db $name> to
configure it. This will be espcially useful if you use the SQLite L<C<ATTACH
DATABASE>|http://www.sqlite.org/lang_attach.html> command to manage multiple
database files in a single project. In that case, you will want to use the
same metadata file for all the databases.

Next, Sqitch deploys changes to the destination database, which we specified
on the command-line. We only have one so far; the C<+> reinforces the idea
that the change is being I<added> to the database.

With this change deployed, if you connect to the database, you'll be able to
see the schema:

    > sqlite3 flipr_test.db '.tables'
    users

=head2 Trust, But Verify

But that's too much work. do you really want to do something like that after
every deploy?

Here's where the C<verify> script comes in. Its job is to test that the deploy
did was it was supposed to. It should do so without regard to any data that
might be in the database, and should throw an error if the deploy was not
successful. The easiest way to do that with a table is to simply C<SELECT>
from it. Put this query into F<verify/users.sql>:

  SELECT nickname, password, timestamp
    FROM users
   WHERE 0;

Now you cab run the C<verify> script with the L<C<verify>|sqitch-verify>
command:

  > sqitch --db-name flipr_test.db verify
  Verifying flipr_test.db
    * users .. ok
  Verify successful

Looks good! If you want to make sure that the verify script correctly dies if
the table doesn't exist, temporarily change the table name in the script to
something that doesn't exist, something like:

  SELECT nickname, password, timestamp
    FROM users_nonesuch
   WHERE 0;

Then L<C<verify>|sqitch-verify> again:

  > sqitch --db-name flipr_test.db verify
  Verifying flipr_test.db
    * users .. Error: near line 5: no such table: users_nonesuch
  # Verify script "verify/users.sql" failed.
  not ok

  Verify Summary Report
  ---------------------
  Changes: 1
  Errors:  1
  Verify failed

It's even nice enough to tell us what the problem is. Don't forget to change
the table name back before continuing!

=head2 Status, Revert, Log, Repeat

For purely informational purposes, we can always see how a deployment was
recorded via the L<C<status>|sqitch-status> command, which reads the tables
from the metadata database:

  > sqitch --db-name flipr_test.db status
  # On database flipr_test.db
  # Project:  flipr
  # Change:   5d339a89c720abc7a85fdca378645c8648e572b5
  # Name:     users
  # Deployed: 2013-04-04 16:19:44 -0700
  # By:       Marge N. O’Vera <marge@example.com>
  # 
  Nothing to deploy (up-to-date)

Let's make sure that we can revert the change:

  > sqitch --db-name flipr_test.db revert
  Revert all changes from flipr_test? [Yes]
    - users .. ok

The L<C<revert>|sqitch-revert> command first prompts to make sure that we
really do want to revert. This is to prevent unnecessary accidents. You can
pass the C<-y> option to disable the prompt. Also, notice the C<-> before the
change name in the output, which reinforces that the change is being
I<removed> from the database. And now the schema should be gone:

    > sqlite3 flipr_test.db '.tables'

And the status message should reflect as much:

  > sqitch --db-name flipr_test.db status
  # On database flipr_test.db
  No changes deployed

Of course, since nothing is deployed, the L<C<verify>|sqitch-verify> command
has nothing to verify:

  > sqitch --db-name flipr_test.db verify
  Verifying flipr_test.db
  No changes deployed

However, we still have a record that the change happened, visible via the
L<C<log>|sqitch-log> command:

  On database flipr_test.db
  Revert 5d339a89c720abc7a85fdca378645c8648e572b5
  Name:      users
  Committer: Marge N. O’Vera <marge@example.com>
  Date:      2013-04-04 18:47:19 -0700

      Creates table to track our users.

  Deploy 5d339a89c720abc7a85fdca378645c8648e572b5
  Name:      users
  Committer: Marge N. O’Vera <marge@example.com>
  Date:      2013-04-04 16:19:44 -0700

      Creates table to track our users.

Note that the actions we took are shown in reverse chronological order, with
the revert first and then the deploy.

Cool. Now let's commit it.

  > echo '*.db' > .gitignore
  > git add .
  > git commit -m 'Add users table.'
  [master f292bb5] Add users table.
   5 files changed, 29 insertions(+)
   create mode 100644 .gitignore
   create mode 100644 deploy/users.sql
   create mode 100644 revert/users.sql
   create mode 100644 verify/users.sql

And then deploy again. This time, let's use the C<--verify> option, so that
the C<verify> script is applied when the change is deployed:

  > sqitch --db-name flipr_test.db deploy --verify
  Deploying changes to flipr_test.db
    + users .. ok

And now the C<users> table should be back:

  > sqlite3 flipr_test.db '.tables'
  users

When we look at the status, the deployment will be there:

  > sqitch --db-name flipr_test.db status
  # On database flipr_test.db
  # Project:  flipr
  # Change:   5d339a89c720abc7a85fdca378645c8648e572b5
  # Name:     users
  # Deployed: 2013-04-04 18:55:09 -0700
  # By:       Marge N. O’Vera <marge@example.com>
  # 
  Nothing to deploy (up-to-date)

=head1 More Configuration

I'm getting a little tired of always having to type
C<--db-name flipr_test.db>, aren't you? We could use C<-d> instead, but even
simpler it to just make that the default. Let's do that, shall we?

  > sqitch config core.sqlite.db_name flipr_test.db

Now we can leave it out, unless we need to deploy to another database. Which
we will, eventually, but at least our examples will be simpler from here on
in, e.g.:

  > sqitch status
  # On database flipr_test.db
  # Project:  flipr
  # Change:   5d339a89c720abc7a85fdca378645c8648e572b5
  # Name:     users
  # Deployed: 2013-04-04 18:55:09 -0700
  # By:       Marge N. O’Vera <marge@example.com>
  # 
  Nothing to deploy (up-to-date)

Yay, that allows things to be a little more concise. Let's also make sure that
changes are verified after deploying them:

  > sqitch config --bool deploy.verify true
  > sqitch config --bool rebase.verify true

We'll see the L<C<rebase>|sqitch-rebase> command a bit later. In the meantime,
let's commit the new configuration and and make some more changes!

  > git commit -am 'Set default DB name and always verify.'
  [master 19dd632] Set default DB name and always verify.
   1 file changed, 6 insertions(+)

=head1 Deploy with Dependency

Let's add another change. Our app will need to store status messages from
users. Let's call them -- and the table to store them -- "flips". First, add
the new change:

  > sqitch add flips --requires users -n 'Adds table for storing flips.'
  Created deploy/flips.sql
  Created revert/flips.sql
  Created verify/flips.sql
  Added "flips [users]" to sqitch.plan

Note that we're requiring the C<users> change as a dependency of the new
C<flips> change. Although that change has already been added to the plan and
therefore should always be applied before the C<flips> change, it's a good
idea to be explicit about dependencies.

Now edit the scripts. When you're done, F<deploy/flips.sql> should look like
this:

  -- Deploy flips
  -- requires: users

  BEGIN;

  CREATE TABLE flips (
      id        INTEGER   PRIMARY KEY AUTOINCREMENT,
      nickname  TEXT      NOT NULL REFERENCES users(nickname),
      body      TEXT      NOT NULL DEFAULT '' CHECK ( length(body) <= 180 ),
      timestamp DATETIME  NOT NULL DEFAULT CURRENT_TIMESTAMP
  );

  COMMIT;

A couple things to notice here. On the second line, the dependence on the
C<users> change has been listed. This doesn't do anything, but the default
C<deploy> template lists it here for your reference while editing the file.
Useful, right?

The C<users.nickname> column references the C<users> table.This is why we need
to require the C<users> change.

Now for the verify script. Again, all we need to do is C<SELECT> from the
table. I recommend selecting each column by name, too, to be sure that no
column is missing. Here's the F<verify/flips.sql>:

  -- Verify flips

  BEGIN;

  SELECT id
       , nickname
       , body
       , timestamp
    FROM flips
   WHERE 0;

  COMMIT;

Now for the revert script: all we have to do is drop the table. Add this to
F<revert/flips.sql>:

  -- Revert flips

  BEGIN;

  DROP TABLE flips;

  COMMIT;

Couldn't be much simpler, right? Let's deploy this bad boy:

  > sqitch deploy
  Deploying changes to flipr_test.db
    + flips .. ok

We know, since verification is enabled, that the table must have been created.
But for the purposes of visibility, let's have a quick look:

  > sqlite3 flipr_test.db '.tables'
  flips  users

We can also verify all currently deployed changes with the
L<C<verify>|sqitch-verify> command:

  > sqitch verify
  Verifying flipr_test.db
    * users .. ok
    * flips .. ok
  Verify successful

Now have a look at the status:

  > sqitch verify
  # On database flipr_test.db
  # Project:  flipr
  # Change:   e881676d95c5d28ac9e75da1caf37c4c39b9d669
  # Name:     flips
  # Deployed: 2013-04-04 19:43:25 -0700
  # By:       Marge N. O’Vera <marge@example.com>
  # 
  Nothing to deploy (up-to-date)

Success! Let's make sure we can revert the change, as well:

  > sqitch revert --to @HEAD^ -y
  Reverting changes to users from flipr_test.db
    - flips .. ok

Note that we've used the C<--to> option to specify the change to revert to.
And what do we revert to? The symbolic tag C<@HEAD>, when passed to
L<C<revert>|sqitch-revert>, always refers to the last change deployed to the
database. (For other commands, it refers to the last change in the plan.)
Appending the caret (C<^>) tells Sqitch to select the change I<prior> to the
last deployed change. So we revert to C<users>, the penultimate change. The
other potentially useful symbolic tag is C<@ROOT>, which refers to the first
change deployed to the database (or in the plan, depending on the command).

Back to the database. The C<flips> table should be gone but the C<users> table
should still be around:

  > sqlite3 flipr_test.db '.tables'               
  users

The L<C<status>|sqitch-status> command politely informs us that we have
undeployed changes:

  > sqitch status
  # On database flipr_test.db
  # Project:  flipr
  # Change:   5d339a89c720abc7a85fdca378645c8648e572b5
  # Name:     users
  # Deployed: 2013-04-04 18:55:09 -0700
  # By:       Marge N. O’Vera <marge@example.com>
  # 
  Undeployed change:
    * flips

As does the L<C<verify>|sqitch-verify> command:

  > sqitch verify         
  Verifying flipr_test.db
    * users .. ok
  Undeployed change:
    * flips
  Verify successful

Note that the verify is successful, because all currently-deployed changes are
verified. The list of undeployed changes (just "flips" here) reminds us about
the current state.

Okay, let's commit and deploy again:

  > git add .
  > git commit -am 'Add flips table.'     
  [master 6bb406e] Add flips table.
   4 files changed, 33 insertions(+)
   create mode 100644 deploy/flips.sql
   create mode 100644 revert/flips.sql
   create mode 100644 verify/flips.sql
  > sqitch deploy         
  Deploying changes to flipr_test.db
    + flips .. ok

Looks good. Check the status:

  > sqitch status         
  # On database flipr_test.db
  # Project:  flipr
  # Change:   e881676d95c5d28ac9e75da1caf37c4c39b9d669
  # Name:     flips
  # Deployed: 2013-04-04 19:50:57 -0700
  # By:       Marge N. O’Vera <marge@example.com>
  # 
  Nothing to deploy (up-to-date)

Excellent. Let's do some more!

=head1 Author

David E. Wheeler <david@justatheory.com>

=head1 License

Copyright (c) 2012-2013 iovation Inc.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

=cut
